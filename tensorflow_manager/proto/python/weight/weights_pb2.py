# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: tensorflow_manager/proto/weight/weights.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='tensorflow_manager/proto/weight/weights.proto',
  package='',
  syntax='proto3',
  serialized_options=None,
  create_key=_descriptor._internal_create_key,
  serialized_pb=b'\n-tensorflow_manager/proto/weight/weights.proto\"\x1f\n\x07Weights\x12\x14\n\x0cweightBinary\x18\x01 \x01(\x0c\x62\x06proto3'
)




_WEIGHTS = _descriptor.Descriptor(
  name='Weights',
  full_name='Weights',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  create_key=_descriptor._internal_create_key,
  fields=[
    _descriptor.FieldDescriptor(
      name='weightBinary', full_name='Weights.weightBinary', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=b"",
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR,  create_key=_descriptor._internal_create_key),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=49,
  serialized_end=80,
)

DESCRIPTOR.message_types_by_name['Weights'] = _WEIGHTS
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Weights = _reflection.GeneratedProtocolMessageType('Weights', (_message.Message,), {
  'DESCRIPTOR' : _WEIGHTS,
  '__module__' : 'tensorflow_manager.proto.weight.weights_pb2'
  # @@protoc_insertion_point(class_scope:Weights)
  })
_sym_db.RegisterMessage(Weights)


# @@protoc_insertion_point(module_scope)
